A simple assembler for use with Notch's dcpu.

A description can be found at: http://0x10c.com/doc/dcpu-16.txt.

This project is far from complete. At the moment, only the lexer is complete. The parser walks over the syntax to check for correctness, but doesn't create the syntax trees at the moment.

TODO:
	- Generate map of labels while walking over input in parser
	- Generate code on second traversal

COMMENTS:
	- Not sure if strings are in the spec or not. Notch's earlier examples showed the use of strings, as well as a "DAT" tag. Both have been removed from my implementation.

SYNTAX:
	- Here's the simplified BNF the parser uses.

	stmt ::= <op> | : <name> <op>

	op ::= <b_op> <oper> , <oper> | <nb_op> <oper>

	b_op ::= SET | ADD | SUB | MUL | DIV | MOD | SHL | SHR | AND | BOR | XOR | IFE | IFN | IFG | IFB

	nb_op ::= JSR

	reg ::= A | B | C | X | Y | Z | I | J | PC | SP | O

	st_op ::= PUSH | POP | PEEK

	oper ::= [ <expr> ] | <term>

	expr ::= <numeric> + <reg> | <hex_numeric> + <reg> | <numeric> | <hex_numeric> | <reg>

	term ::= <name> | <numeric> | <hex_numeric> | <reg> | <st_op>
